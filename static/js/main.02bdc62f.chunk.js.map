{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserNameStatus","App","textboxColor","useState","username","setUsername","typeOfUsername","length","invalid","vowels","numberOfVowels","split","filter","letter","includes","verified","unverified","className","placeholder","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6JAGKA,E,uEAAAA,K,kBAAAA,E,oBAAAA,E,yBAAAA,M,KAoDUC,MA9Cf,WAAgB,IAoBVC,EApBS,EACmBC,mBAAiB,IADpC,mBACNC,EADM,KACIC,EADJ,KAGPC,EAAiB,WAErB,GAAIF,EAASG,OAAS,GAAI,OAAOP,EAAeQ,QAEhD,IAAMC,EAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,KACxCC,EAAyBN,EAC5BO,MAAM,IACNC,QAAO,SAACC,GAAD,OAAoBJ,EAAOK,SAASD,MAASN,OAKvD,OAHmBG,GADgBN,EAASG,OAASG,GAE1B,EAETV,EAAee,SAE1Bf,EAAegB,YAIxB,OAAQV,KACN,KAAKN,EAAeQ,QAClBN,EAAe,MACf,MACF,KAAKF,EAAee,SAClBb,EAAe,OACf,MACF,KAAKF,EAAegB,WAClBd,EAAe,OAInB,OACE,sBAAKe,UAAU,MAAf,UACE,uBACEA,UAAS,2BAAsBf,GAC/BgB,YAAY,sBACZC,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAYgB,EAAEC,OAAOH,UAEvCf,GAAY,qBAAKa,UAAU,SAAf,SAAyBX,UCpC7BiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.02bdc62f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nenum UserNameStatus {\n  invalid = \"invalid\",\n  verified = \"verified\",\n  unverified = \"unverified\",\n}\n\nfunction App() {\n  const [username, setUsername] = useState<string>(\"\");\n\n  const typeOfUsername = (): UserNameStatus => {\n    //Insert your code here\n    if (username.length > 25) return UserNameStatus.invalid;\n\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const numberOfVowels: number = username\n      .split(\"\")\n      .filter((letter: string) => vowels.includes(letter)).length;\n    const numberOfConsonants: number = username.length - numberOfVowels;\n    const difference = numberOfVowels * numberOfConsonants;\n    const isOdd = difference % 2;\n\n    if (isOdd) return UserNameStatus.verified;\n\n    return UserNameStatus.unverified;\n  };\n\n  let textboxColor: string;\n  switch (typeOfUsername()) {\n    case UserNameStatus.invalid:\n      textboxColor = \"red\";\n      break;\n    case UserNameStatus.verified:\n      textboxColor = \"blue\";\n      break;\n    case UserNameStatus.unverified:\n      textboxColor = \"gray\";\n      break;\n  }\n\n  return (\n    <div className=\"App\">\n      <input\n        className={`username-textbox ${textboxColor}`}\n        placeholder=\"Enter username here\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      {username && <div className=\"status\">{typeOfUsername()}</div>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}